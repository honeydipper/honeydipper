---
defaults: &defaults
  docker:
    - image: golang:1.18.10-alpine
  working_directory: /go/src/github.com/honeydipper/honeydipper

version: 2.1

commands:
  setup:
    steps:
      - run: apk add git openssh-client gcc libc-dev make
      - checkout
      - restore-mod
  restore-mod:
    steps:
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
            - go-mod-v1-
  save-mod:
    steps:
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod

jobs:
  install:
    <<: *defaults
    resource_class: medium+
    steps:
      - setup
      - run: go install -v ./...
      - save-mod
      - persist_to_workspace:
          root: /go
          paths:
            - ./bin
            - ./src/github.com/honeydipper/honeydipper
  golangci-lint:
    <<: *defaults
    resource_class: medium+
    docker:
      - image: golangci/golangci-lint:v1.50-alpine
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-buildcache-
          paths:
            - /root/.cache
      # We want to keep the cache, but save it every time
      - run: echo "$CIRCLE_BUILD_NUM-$CIRCLE_JOB" > /tmp/build_num
      - run: golangci-lint run
      - save_cache:
          key: v1-buildcache-{{ checksum "/tmp/build_num" }}
          paths:
            - /root/.cache
  license_finder:
    resource_class: small
    <<: *defaults
    steps:
      - checkout
      - run: go mod download
      - run: |
          apk add -u ruby ruby-dev build-base && gem install json license_finder && license_finder --decisions_file=./.dependency_decisions.yml
  test:
    <<: *defaults
    resource_class: medium+
    steps:
      - attach_workspace:
          at: /go
      - setup
      - run: go install gotest.tools/gotestsum@latest
      - run: gotestsum -f testname --junitfile test-results/gotestsum-report.xml
      - store_test_results:
          path: test-results
  test_coverage:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /go
      - setup
      - run:
          name: Setup Code Climate test-reporter
          command: |
            # download test reporter as a static binary
            wget -O cc-test-reporter https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64
            chmod +x ./cc-test-reporter
      - run: ./cc-test-reporter before-build
      - run: REPORT_TEST_COVERAGE=1 make unit-tests
      - run: ./cc-test-reporter after-build --prefix=github.com/honeydipper/honeydipper
  integration:
    <<: *defaults
    docker:
      - image: golang:1.18.10-alpine
      - image: redis:7.0.10-alpine
    steps:
      - attach_workspace:
          at: /go
      - run:
          name: install dependencies
          command: >
            apk add --repository http://dl-3.alpinelinux.org/alpine/edge/testing
            git openssh-client gcc libc-dev dockerize make
      - checkout
      - restore-mod
      - run:
          name: Wait for Redis
          command: dockerize -wait tcp://127.0.0.1:6379 -timeout 120s
      - run: make integration-tests
  semantic-release:
    docker:
      - image: cimg/node:19.6.0
    steps:
      - checkout
      - run: |
          sudo npm install -g semantic-release      \
          @semantic-release/changelog               \
          @semantic-release/commit-analyzer         \
          @semantic-release/git                     \
          @semantic-release/release-notes-generator
      - run: npx semantic-release

workflows:
  version: 2
  run_tests:
    jobs:
      - license_finder
      - golangci-lint
      - install
      - test_coverage:
          context: honeydipper
          filters:
            branches:
              only: dev
          requires:
            - install
      - test:
          filters:
            branches:
              ignore: dev
          requires:
            - install
      - integration:
          requires:
            - install
          filters:
            branches:
              ignore: dev
  release:
    jobs:
      - semantic-release:
          context: honeydipper
          filters:
            branches:
              only: main
