---
defaults: &defaults
  docker:
    - image: golang:1.15.7-alpine
      environment:
        - GO111MODULE=on
  working_directory: /go/src/github.com/honeydipper/honeydipper

license_finder: &license_finder
  docker:
    - image: licensefinder/license_finder:6.10.0
  working_directory: /root/src/honeydipper

restore_mod: &restore_mod
  restore_cache:
    key: go-mod-v1-{{ checksum "go.sum" }}

save_mod: &save_mod
  save_cache:
    key: go-mod-v1-{{ checksum "go.sum" }}
    paths:
      - /go/pkg/mod

version: 2
jobs:
  golangci-lint:
    <<: *defaults
    docker:
      - image: golangci/golangci-lint:v1.36.0-alpine
    steps:
      - checkout
      - run: golangci-lint run
  license_finder:
    <<: *license_finder
    steps:
      - checkout
      - run: go build -v ./...
      - run: |
          source /root/.bash_profile
          license_finder --decisions_file=./.dependency_decisions.yml
  test:
    <<: *defaults
    steps:
      - run: apk add git openssh-client gcc libc-dev make
      - checkout
      - *restore_mod
      - run: go build -v ./...
      - *save_mod
      - run: make unit-tests
  test_coverage:
    <<: *defaults
    steps:
      - run: apk add git openssh-client gcc libc-dev make
      - checkout
      - run:
          name: Setup Code Climate test-reporter
          command: |
            # download test reporter as a static binary
            wget -O cc-test-reporter https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64
            chmod +x ./cc-test-reporter
      - run: ./cc-test-reporter before-build
      - *restore_mod
      - run: go build -v ./...
      - *save_mod
      - run: REPORT_TEST_COVERAGE=1 make unit-tests
      - run: ./cc-test-reporter after-build --prefix=github.com/honeydipper/honeydipper
  integration:
    <<: *defaults
    docker:
      - image: golang:1.15.7-alpine
      - image: redis:5.0.10-alpine
    steps:
      - run:
          name: install dependencies
          command: >
            apk add --repository http://dl-3.alpinelinux.org/alpine/edge/testing
            git openssh-client gcc libc-dev dockerize make
      - checkout
      - *restore_mod
      - run: go install -v ./...
      - *save_mod
      - run:
          name: Wait for Redis
          command: dockerize -wait tcp://127.0.0.1:6379 -timeout 120s
      - run: make integration-tests
  semantic-release:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - run: |
          sudo npm install -g semantic-release      \
          @semantic-release/changelog               \
          @semantic-release/commit-analyzer         \
          @semantic-release/git                     \
          @semantic-release/release-notes-generator
      - run: npx semantic-release

workflows:
  version: 2
  run_tests:
    jobs:
      - golangci-lint
      - license_finder
      - test_coverage:
          context: honeydipper
          filters:
            branches:
              only: dev
      - test:
          requires:
            - golangci-lint
            - license_finder
          filters:
            branches:
              ignore: dev
      - integration:
          requires:
            - test
          filters:
            branches:
              ignore: dev
  release:
    jobs:
      - semantic-release:
          context: honeydipper
          filters:
            branches:
              only: main
