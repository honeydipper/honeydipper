// Copyright 2022 PayPal Inc.
//
// This Source Code Form is subject to the terms of the MIT License.
// If a copy of the MIT License was not distributed with this file,
// you can obtain one at https://mit-license.org/.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: drivers/cmd/hd-driver-embeddings/ollama.go

// Package mock_main is a generated GoMock package.
package mock_main

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/ollama/ollama/api"
)

// MockOllamaClientInterface is a mock of OllamaClientInterface interface.
type MockOllamaClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOllamaClientInterfaceMockRecorder
}

// MockOllamaClientInterfaceMockRecorder is the mock recorder for MockOllamaClientInterface.
type MockOllamaClientInterfaceMockRecorder struct {
	mock *MockOllamaClientInterface
}

// NewMockOllamaClientInterface creates a new mock instance.
func NewMockOllamaClientInterface(ctrl *gomock.Controller) *MockOllamaClientInterface {
	mock := &MockOllamaClientInterface{ctrl: ctrl}
	mock.recorder = &MockOllamaClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOllamaClientInterface) EXPECT() *MockOllamaClientInterfaceMockRecorder {
	return m.recorder
}

// Embeddings mocks base method.
func (m *MockOllamaClientInterface) Embeddings(ctx context.Context, req *api.EmbeddingRequest) (*api.EmbeddingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Embeddings", ctx, req)
	ret0, _ := ret[0].(*api.EmbeddingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Embeddings indicates an expected call of Embeddings.
func (mr *MockOllamaClientInterfaceMockRecorder) Embeddings(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Embeddings", reflect.TypeOf((*MockOllamaClientInterface)(nil).Embeddings), ctx, req)
}
