// Copyright 2022 PayPal Inc.
//
// This Source Code Form is subject to the terms of the MIT License.
// If a copy of the MIT License was not distributed with this file,
// you can obtain one at https://mit-license.org/.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: drivers/pkg/ai/chat_wrapper_interface.go

// Package mock_ai is a generated GoMock package.
package mock_ai

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dipper "github.com/honeydipper/honeydipper/pkg/dipper"
)

// MockChatWrapperInterface is a mock of ChatWrapperInterface interface.
type MockChatWrapperInterface struct {
	ctrl     *gomock.Controller
	recorder *MockChatWrapperInterfaceMockRecorder
}

// MockChatWrapperInterfaceMockRecorder is the mock recorder for MockChatWrapperInterface.
type MockChatWrapperInterfaceMockRecorder struct {
	mock *MockChatWrapperInterface
}

// NewMockChatWrapperInterface creates a new mock instance.
func NewMockChatWrapperInterface(ctrl *gomock.Controller) *MockChatWrapperInterface {
	mock := &MockChatWrapperInterface{ctrl: ctrl}
	mock.recorder = &MockChatWrapperInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatWrapperInterface) EXPECT() *MockChatWrapperInterfaceMockRecorder {
	return m.recorder
}

// AppendHistory mocks base method.
func (m *MockChatWrapperInterface) AppendHistory(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendHistory", msg)
}

// AppendHistory indicates an expected call of AppendHistory.
func (mr *MockChatWrapperInterfaceMockRecorder) AppendHistory(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendHistory", reflect.TypeOf((*MockChatWrapperInterface)(nil).AppendHistory), msg)
}

// Cancel mocks base method.
func (m *MockChatWrapperInterface) Cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel")
}

// Cancel indicates an expected call of Cancel.
func (mr *MockChatWrapperInterfaceMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockChatWrapperInterface)(nil).Cancel))
}

// ChatRelay mocks base method.
func (m *MockChatWrapperInterface) ChatRelay(msg *dipper.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChatRelay", msg)
}

// ChatRelay indicates an expected call of ChatRelay.
func (mr *MockChatWrapperInterfaceMockRecorder) ChatRelay(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatRelay", reflect.TypeOf((*MockChatWrapperInterface)(nil).ChatRelay), msg)
}

// Context mocks base method.
func (m *MockChatWrapperInterface) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockChatWrapperInterfaceMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockChatWrapperInterface)(nil).Context))
}

// Engine mocks base method.
func (m *MockChatWrapperInterface) Engine() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Engine")
	ret0, _ := ret[0].(string)
	return ret0
}

// Engine indicates an expected call of Engine.
func (mr *MockChatWrapperInterfaceMockRecorder) Engine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Engine", reflect.TypeOf((*MockChatWrapperInterface)(nil).Engine))
}

// GetHistory mocks base method.
func (m *MockChatWrapperInterface) GetHistory() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockChatWrapperInterfaceMockRecorder) GetHistory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockChatWrapperInterface)(nil).GetHistory))
}

// Lock mocks base method.
func (m *MockChatWrapperInterface) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock.
func (mr *MockChatWrapperInterfaceMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockChatWrapperInterface)(nil).Lock))
}

// Unlock mocks base method.
func (m *MockChatWrapperInterface) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockChatWrapperInterfaceMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockChatWrapperInterface)(nil).Unlock))
}

// MockChatter is a mock of Chatter interface.
type MockChatter struct {
	ctrl     *gomock.Controller
	recorder *MockChatterMockRecorder
}

// MockChatterMockRecorder is the mock recorder for MockChatter.
type MockChatterMockRecorder struct {
	mock *MockChatter
}

// NewMockChatter creates a new mock instance.
func NewMockChatter(ctrl *gomock.Controller) *MockChatter {
	mock := &MockChatter{ctrl: ctrl}
	mock.recorder = &MockChatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatter) EXPECT() *MockChatterMockRecorder {
	return m.recorder
}

// BuildMessage mocks base method.
func (m *MockChatter) BuildMessage(text string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildMessage", text)
	ret0, _ := ret[0].(any)
	return ret0
}

// BuildMessage indicates an expected call of BuildMessage.
func (mr *MockChatterMockRecorder) BuildMessage(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildMessage", reflect.TypeOf((*MockChatter)(nil).BuildMessage), text)
}

// BuildToolReturnMessage mocks base method.
func (m *MockChatter) BuildToolReturnMessage(name, callID string, b []byte) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildToolReturnMessage", name, callID, b)
	ret0, _ := ret[0].(any)
	return ret0
}

// BuildToolReturnMessage indicates an expected call of BuildToolReturnMessage.
func (mr *MockChatterMockRecorder) BuildToolReturnMessage(name, callID, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildToolReturnMessage", reflect.TypeOf((*MockChatter)(nil).BuildToolReturnMessage), name, callID, b)
}

// BuildUserMessage mocks base method.
func (m *MockChatter) BuildUserMessage(user, text string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildUserMessage", user, text)
	ret0, _ := ret[0].(any)
	return ret0
}

// BuildUserMessage indicates an expected call of BuildUserMessage.
func (mr *MockChatterMockRecorder) BuildUserMessage(user, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildUserMessage", reflect.TypeOf((*MockChatter)(nil).BuildUserMessage), user, text)
}

// InitMessages mocks base method.
func (m *MockChatter) InitMessages(engine string) []any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitMessages", engine)
	ret0, _ := ret[0].([]any)
	return ret0
}

// InitMessages indicates an expected call of InitMessages.
func (mr *MockChatterMockRecorder) InitMessages(engine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitMessages", reflect.TypeOf((*MockChatter)(nil).InitMessages), engine)
}

// Stream mocks base method.
func (m *MockChatter) Stream(msg any, hist []byte, streamHandler func(string, bool), toolCallHandler func(string, map[string]any, string, string)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stream", msg, hist, streamHandler, toolCallHandler)
}

// Stream indicates an expected call of Stream.
func (mr *MockChatterMockRecorder) Stream(msg, hist, streamHandler, toolCallHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockChatter)(nil).Stream), msg, hist, streamHandler, toolCallHandler)
}

// StreamWithFunctionReturn mocks base method.
func (m *MockChatter) StreamWithFunctionReturn(ret any, streamHandler func(string, bool), toolCallHandler func(string, map[string]any, string, string)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StreamWithFunctionReturn", ret, streamHandler, toolCallHandler)
}

// StreamWithFunctionReturn indicates an expected call of StreamWithFunctionReturn.
func (mr *MockChatterMockRecorder) StreamWithFunctionReturn(ret, streamHandler, toolCallHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamWithFunctionReturn", reflect.TypeOf((*MockChatter)(nil).StreamWithFunctionReturn), ret, streamHandler, toolCallHandler)
}
